
Due to not being susceptible to the EXT4 inodes exhaustion problem and
offering zstd compression which can almost double the actual capacity
of a storage device at little computation cost, Btrfs is the current
file system of choice for GNU/Linux-based Guix System build machines.

** Btrfs compression and mount options

To get the most out of Btrfs, enabling zstd compression is
recommended.  When using RAID arrays, it can also be useful to use the
~degraded~ mount option, otherwise the RAID could fail to assemble at
boot if any drive part of the array has a problem.  Here's an alist of
recommended mount options, taken from
file:../hydra/deploy-node-129.scm for a build machine when high
availability is preferred over data safety (degraded):

#+begin_src scheme
(define %common-btrfs-options '(("compress-force" . "zstd")
                                ("space_cache" . "v2")
                                "degraded"))
#+end_src

** Btrfs balance mcron job

To ensure it operates without manual intervention, a balance job
should run periodically to ensure the unallocated space (a
Btrfs-specific concept) remains in check with the actual free space.
Otherwise, the system could report ~ENOSPC~ even when common utilities
such as ~df -h~ report plenty of free space.  To view the amount of
available unallocated space, the ~btrfs filesystem usage /~ can be
used.

The following mcron job example is taken from the
file:../hydra/deploy-node-129.scm machine configuration:

#+begin_src scheme
(define btrfs-balance-job
  ;; Re-allocate chunks which are using less than 5% of their chunk
  ;; space, to regain Btrfs 'unallocated' space.  The usage is kept
  ;; low (5%) to minimize wear on the SSD.  Runs at 5 AM every 3 days.
  #~(job '(next-hour-from (next-day (range 1 31 3)) '(5))
         (lambda ()
           (execl #$(file-append btrfs-progs "/bin/btrfs") "btrfs"
                  "balance" "start" "-dusage=5" "/"))
         "btrfs-balance")
