{:paths ["script"]
 :tasks {:requires [guix]

         ; helper tasks
         sudo (guix/sudo *command-line-args*)
         guix (guix/guix)

         ; verbosity:
         ; 0 means that no output is produced
         ; 1 is for quiet output
         ; 2 is similar to 1 but it additionally displays download URLs
         ; 3 shows all the build log output on standard error.

        ; install
         install-channels {:doc "installs channels"
                           :task (guix/pull "channels")}
         install-desktop {:doc "installs desktop packages"
                          :task (guix/package "desktop"
                                              "--verbosity=1"
                                              "--no-grafts")}

         ; guix maintenance
         gc {:doc "guix garbage collect"
             :task (do (println "guix garbage collect..")
                       (guix/guix "gc" "--optimize" "-d" "2m")
                       (guix/guix "gc" "-F" "200G"))}
         pull {:doc "guix pull (update package definitions)"
               :task  (do (println "guix pull..") 
                         (guix/guix "pull"
                                    ; The default location (if you don't pass explicit --channels) is ~/.config/guix/channels.scm.
                                    (str "--channels=" "./channels.scm")
                                    "--verbosity=3"))}
         upgrade {:doc "guix upgrade installed packages"
                  :task (do (println "guix upgrade packages..")
                            (guix/guix "upgrade"))}
         update {:doc "Updates guix (gc pull upgrade)" ; ensure sequential order 
                 :task (do ;(run 'gc)
                           (run 'pull)
                           (run 'upgrade))}


        ; build
         build-nuc-user (guix/system "reconfigure" "nuc")
         build-nuc {:doc "builds image for nuc"
                          :task (do (guix/sudo "build-nuc-user")
                                    (guix/guix "system" "describe"))}

         build-vm {:doc "builds vm-image to be run with qemu"
           :task (do (println "building vm image..")
                     (guix/system "vm-terminal"
                                  "vm"
                                  "--verbosity=3" 
                                  "--no-grafts"))}

         build-ocean-image {:doc "builds ocean vm-image to be run with qemu"
          :task (do (println "building vm image..")
                    (guix/system "ocean"
                                 "image"
                                 "--verbosity=3"
                                 "--no-grafts")
                     (println "qemu-img convert -c -f raw -O qcow2 /gnu/store/r4kzcncfvr8l7j9rmmigja73jlhsic6b-disk-image  /tmp/server.qcow2")
                                )}

        ; https://guix.gnu.org/cookbook/en/guix-cookbook.html#Running-Guix-on-a-Linode-Server
        ; https://cloudinit.readthedocs.io/en/stable/
        ;# guix package: cloud-utils    has cloud-init
        ; Guile AWS for AWS backend.
        ; 178.128.203.133
        ; cloud.digitalocean.com
        ; https://othacehe.org/hosting-a-blog-using-only-scheme.html
        build-ocean {:doc "builds digital-ocean image and deploys it" 
                    ; https://stumbles.id.au/getting-started-with-guix-deploy.html
                    ; cfdisk, select the /dev/vda2 root partition, select "Resize", "Write" and type "yes". 
                    ; Then resize the filesystem to match by running resize2fs /dev/vda2.
                     :task (do (println "builing/deploying digital-ocean image..")
                               (guix/guix "deploy"
                                          "./machine/ocean.scm"
                                          "--verbosity=3"
                                          "--no-grafts"))}

         ; https://guix.gnu.org/en/blog/2017/porting-guixsd-to-armv7/
         ; https://framagit.org/tyreunom/guix-android
         ; https://gitlab.manjaro.org/manjaro-arm/packages/core/linux/-/blob/master/config
         ; https://guix.gnu.org/de/blog/2019/guix-on-an-arm-board/
         ; https://github.com/guix-mirror/guix/blob/master/gnu/system/images/rock64.scm
         ; build-rock (guix/system "image" "rock1")
         ; when this image is booted execute bash /etc/static/boostrap.sh
         build-rock {:doc "builds an image for pine/rock-pro"
                     :task (guix/image "rock-min"
                                       "--image-type=rock64-raw"
                                      ; "--system=aarch64-linux"  ; via qemu (slow, but works)
                                        "--target=aarch64-linux-gnu" ; cross-compilation for TRIPLET
                                       "--image-size=50G" ; use up most of the volume
                                       "--cores=6"
                                       ;"--no-grafts"
                                       )}

        ; guix system image -t rock64-raw --system=aarch64-linux -e "(@ (gnu system install) rockpro64-installation-os)"
         build-rock-installer {:doc "builds guix installer-image for pine/rock-pro"
                               :task (guix/guix "system" "image"
                                                "--no-grafts"
                                                "-t" "rock64-raw"
                                       ;  "--system=aarch64-linux" 
                                        ; "--target=aarch64-linux" ; cross-compilation via qemu
                                                "--target=aarch64-linux-gnu" ; cross-compilation via qemu
                                                "-e" "(@ (gnu system install) rockpro64-installation-os)")}


         ; https://othacehe.org/distributing-guix-system-pinebook-pro-images.html
         ; guix system disk-image --system=armhf-linux -e "(@ (gnu system install) beaglebone-black-installation-os)"
         build-pine-installer (guix/guix "system" "image" 
                                "--system=aarch64-linux"
                                ;"--target=aarch64-linux-gnu"
                                "--image-type=pine64-raw"
                                ;"--no-grafts"
                                 "-e" "(@ (gnu system install) pine64-plus-installation-os)"
                                )

         ; https://github.com/Schroedinger50PCT/guix-pinephone
         ; Der linux-libre-arm64-generic kernel bootet aber gibt keinen Display output.
         ; image --image-type=pine64-raw my-pine-os.scm
         build-pine (guix/image "pinephone"
                                ;"--system=aarch64-linux"
                                "--target=aarch64-linux-gnu" 
                                "--image-type=pine64-raw"
                                ;"--no-grafts"
                                )
         build-pine-chromium (guix/image "pinephone-chromium"
                                        ;"--system=aarch64-linux"
                                        "--target=aarch64-linux-gnu"
                                      ;  "--image-type=pine64-raw"
                                        ;"--no-grafts"
                                        )

         ; pinebook pro
         ; https://github.com/Schroedinger50PCT/guix-pinebook-pro/blob/main/pbp.scm

         ; nonfree
         ; https://github.com/aartaka/guix-config/blob/master/nonfree-desktop.scm
         ; https://willschenk.com/articles/2019/installing_guix_on_nuc/


         ; environment (guix/guix "environment")
         environment-openjdk-11 (guix/guix "environment" "--ad-hoc" "openjdk@11")

         ;export 
         export-channels (guix/guix "package" "--export-channels")
         export-manifest (guix/guix "package" "--export-manifest")
         ; show
         show-channels (guix/guix "describe")
         show-channels-root (guix/sudo "describe")
         show-manifest (shell "cat" "/home/florian/.config/guix/current/manifest")
         show-manifest-root (shell "cat" "/home/florian/.config/guix/current/manifest")
         show-image-types (guix/guix "system" "--list-image-types")
        ; size
         size-clojure {:doc "size of clojure"
                       :task (do (println "guix size clojure..")
                                 (guix/guix "size" "clojure"))}
       ; guix size $(guix system build os.scm)
         size-desktop {:doc "size of desktop"
                       :task (do (println "guix size desktop..")
                                 (guix/guix "size" (guix/guix "system" "build" "./machine/nuc.scm")))}

         graph-clojure (guix/graph "clojure") ; this does not work yet.
         guix-repl (guix/guix "repl")

         home-configure (guix/guix "home" "reconfigure" "./home/config.scm")

         a 1 
         b {:depends [a]    ; bb run --prn b          this tests return values of tasks
            :task (inc a)}
 ;
         }}