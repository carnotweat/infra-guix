{:paths ["script"]
 :tasks {:requires [guix]

         ; helper tasks
         sudo (guix/sudo *command-line-args*)
         guix (guix/guix)

         ; verbosity:
         ; 0 means that no output is produced
         ; 1 is for quiet output
         ; 2 is similar to 1 but it additionally displays download URLs
         ; 3 shows all the build log output on standard error.

        ; install
         install-channels {:doc "installs channels"
                           :task (guix/pull "channels")}
         install-nuc {:doc "installs nuc desktop packages"
                          :task (guix/package "nuc"
                                              "--verbosity=1"
                                              "--no-grafts")}

         ; guix maintenance
         gc {:doc "guix garbage collect"
             :task (do (println "guix garbage collect..")
                       (guix/guix "gc" "--optimize" "-d" "2m")
                       (guix/guix "gc" "-F" "200G"))}
         pull {:doc "guix pull (update package definitions)"
               :task  (do (println "guix pull..")
                          (guix/guix "pull"
                                    ; The default location (if you don't pass explicit --channels) is ~/.config/guix/channels.scm.
                                     (str "--channels=" "./channels.scm")
                                     "--verbosity=3"
                                     "--max-silent-time=10000"  ; seconds
                                     "--timeout=10000" ; seconds
                                     ))}
         upgrade {:doc "guix upgrade installed packages"
                  :task (do (println "guix upgrade packages..")
                            (guix/guix "upgrade"))}
         update {:doc "Updates guix (gc pull upgrade)" ; ensure sequential order 
                 :task (do ;(run 'gc)
                         (run 'pull)
                         (run 'upgrade))}

         update-root {:doc "updates guix ROOT (gc pull upgrade)"
                      :task (do (guix/sudo "update")
                                (guix/guix "system" "describe"))}
         
        ; NUC
         nuc-build-user (guix/system "nuc"
                                     "reconfigure")
         nuc-build  {:doc "builds guix os for desktop nuc (runs as sudo)"
                     :task (do (guix/sudo "nuc-build-user")
                               (guix/guix "system" "describe"))}

         ; VM TERMINAL

         build-vm {:doc "builds vm-image to be run with qemu"
                   :task (do (println "building vm image..")
                             (guix/system "vm-terminal"
                                          "vm"
                                          "--verbosity=3"
                                          "--no-grafts"))}

         ; DOCKER
     
          
         ; installer
          installer-build {:doc "builds installer vm-image to be run with qemu"
                           :task (let [_ (println "building ocean vm image..")
                                      ; guix system disk-image -t qcow2 config.scm' .
                                       r (guix/image-result "installer"
                                                            "--verbosity=3"
                                                            "--no-grafts")
                                       r-out (:out r)
                                       img (clojure.string/trim r-out)]
                                    ; "qemu-img convert -c -f raw -O qcow2 /gnu/store/r4kzcncfvr8l7j9rmmigja73jlhsic6b-disk-image  /tmp/server.qcow2"
                                    (println "installer image result: ]" img "[ ")
                                    (shell "sync")
                                    (shell "qemu-img convert"
                                           "-c"
                                           "-f" "raw"
                                           "-O" "qcow2"
                                           img
                                           "artefact/installer.qcow2")
                               (println "generated image: artefact/installer.qcow2")
                               (println "you might want to upload it to: https://cloud.digitalocean.com/images/custom_images")
                               (println "region has to match the region where you deploy to"))}

           installer-run {:doc "run installer vm-image"
                         :task (shell "qemu-system-x86_64"
                                    "-enable-kvm" ; enable hardware virtual machine support (KVM) - run faster
                                    "-m" "2048"
                                    "-vga" "virtio"
                                ; network
                                    "-netdev" "user,id=vnet,hostfwd=tcp::10022-:22" ; ,smb=/home/florian/Downloads
                                    "-device" "virtio-net-pci,netdev=vnet"
                                ; file share
                                    "-virtfs" "local,path=/home/florian/Downloads,mount_tag=bongo,security_model=none"
                                ;harddisk 
                                    "-device" "virtio-blk,drive=myhd"
                                    "-drive" "if=none,file=./artefact/installer.qcow2,id=myhd")}

         ; OCEAN
        ocean-docker {:doc "builds docker image"
                      :task (let [_ (println "building ocean docker image..")
                                  r (guix/guix-result 
                                          "pack"
                                          "--format=docker"
                                          "--verbosity=3"
                                          "--no-grafts"
                                          "--cores=4"
                                          ;  "--root=./artefact/docker-ocean.tar.gz"
                                          ;"--entry-point=bin/guile"
                                          "--manifest=./machine/ocean-docker.scm")
                                   r-out (:out r)
                                   img (clojure.string/trim r-out)]
                                (println "docker is loading docker image from tar.gz: " img)
                                (shell "docker" "load" "--input" img) ; image will have tag guix:latest
                                (println "tagging image: pinkgorilla:latest")
                                (shell "docker" "tag" "guix:latest" "ocean:latest")
                                )}

        ocean-build {:doc "builds digital-ocean vm-image to be run with qemu"
                      :task (let [_ (println "building ocean vm image..")
                                  ; guix system disk-image -t qcow2 config.scm' .
                                  r (guix/image-result "ocean-image"
                                                   "--verbosity=3"
                                                   "--no-grafts")
                                  r-out (:out r)
                                  img (clojure.string/trim r-out)]
                                ; "qemu-img convert -c -f raw -O qcow2 /gnu/store/r4kzcncfvr8l7j9rmmigja73jlhsic6b-disk-image  /tmp/server.qcow2"
                                (println "ocean image result: ]" img"[ ")
                                (shell "sync")
                                (shell "qemu-img convert" 
                                       "-c" 
                                       "-f" "raw"
                                       "-O" "qcow2"
                                       img
                                      "artefact/ocean.qcow2")
                                (println "generated image: artefact/ocean.qcow2")
                                (println "you might want to upload it to: https://cloud.digitalocean.com/images/custom_images")
                                (println "region has to match the region where you deploy to")
                                )}

        ocean-run {:doc "run digital-ocean vm-image (ssh port outside:10022)"
                   :task (shell "qemu-system-x86_64"
                                "-enable-kvm" ; enable hardware virtual machine support (KVM) - run faster
                                "-m" "2048"
                                "-vga" "virtio"
                                ; network
                                "-netdev" "user,id=vnet,hostfwd=tcp::10022-:22" ; ,smb=/home/florian/Downloads
                                "-device" "virtio-net-pci,netdev=vnet"
                                ; file share
                                "-virtfs" "local,path=/home/florian/Downloads,mount_tag=bongo,security_model=none"
                                ;harddisk 
                                "-device" "virtio-blk,drive=myhd"
                                "-drive" "if=none,file=./artefact/ocean.qcow2,id=myhd"
                                )}

        ; https://guix.gnu.org/cookbook/en/guix-cookbook.html#Running-Guix-on-a-Linode-Server
        
        ; 178.128.203.133
        ; cloud.digitalocean.com
        ; https://othacehe.org/hosting-a-blog-using-only-scheme.html
        ocean-deploy {:doc "builds digital-ocean image and deploys it"
                    ; https://stumbles.id.au/getting-started-with-guix-deploy.html
                    ; cfdisk, select the /dev/vda2 root partition, select "Resize", "Write" and type "yes". 
                    ; Then resize the filesystem to match by running resize2fs /dev/vda2.
                       :task (do (println "builing/deploying digital-ocean image..")
                                 (guix/guix "deploy"
                                            "./machine/ocean.scm"
                                            "--verbosity=3"
                                            "--no-grafts"))}

        ; AWS
        ; https://cloudinit.readthedocs.io/en/stable/
        ; # guix package: cloud-utils    has cloud-init
        ; Guile AWS for AWS backend.


         ; ROCK-PRO
         
        rock-build {:doc "builds an image for pine/rock-pro"
                     ; https://guix.gnu.org/en/blog/2017/porting-guixsd-to-armv7/
                     ; https://framagit.org/tyreunom/guix-android
                     ; https://gitlab.manjaro.org/manjaro-arm/packages/core/linux/-/blob/master/config
                     ; https://guix.gnu.org/de/blog/2019/guix-on-an-arm-board/
                     ; https://github.com/guix-mirror/guix/blob/master/gnu/system/images/rock64.scm
                     ; build-rock (guix/system "image" "rock1")
                     ; when this image is booted execute bash /etc/static/boostrap.sh
                     :task (guix/image "rock-min"
                                       "--image-type=rock64-raw"
                                      ; "--system=aarch64-linux"  ; via qemu (slow, but works)
                                       "--target=aarch64-linux-gnu" ; cross-compilation for TRIPLET
                                       "--image-size=16G" ; use up most of the volume
                                       "--cores=6"
                                       ;"--no-grafts"
                                       )}

        ; guix system image -t rock64-raw --system=aarch64-linux -e "(@ (gnu system install) rockpro64-installation-os)"
        ; https://github.com/SystemCrafters/guix-installer
        ; https://github.com/ofosos/guix-packer
         rock-build-installer {:doc "builds guix installer-image for pine/rock-pro"
                               :task (guix/guix "system" "image"
                                               ; "--no-grafts"
                                                "--image-type=rock64-raw"
                                                "--system=aarch64-linux"
                                        ; "--target=aarch64-linux" ; cross-compilation via qemu
                                                "--target=aarch64-linux-gnu" ; cross-compilation via qemu
                                                "-e" "(@ (gnu system install) rockpro64-installation-os)")}

         ;; PINE PHONE
         ; https://othacehe.org/distributing-guix-system-pinebook-pro-images.html
         ; guix system disk-image --system=armhf-linux -e "(@ (gnu system install) beaglebone-black-installation-os)"
         pine-build-installer (guix/guix "system" "image"
                                         "--system=aarch64-linux"
                                ;"--target=aarch64-linux-gnu"
                                         "--image-type=pine64-raw"
                                ;"--no-grafts"
                                         "-e" "(@ (gnu system install) pine64-plus-installation-os)")

         ; https://github.com/Schroedinger50PCT/guix-pinephone
         ; Der linux-libre-arm64-generic kernel bootet aber gibt keinen Display output.
         ; image --image-type=pine64-raw my-pine-os.scm
         pine-build (guix/image "pinephone"
                                ;"--system=aarch64-linux"
                                "--target=aarch64-linux-gnu"
                                "--image-type=pine64-raw"
                                ;"--no-grafts"
                                )
         pine-build-chromium (guix/image "pinephone-chromium"
                                        ;"--system=aarch64-linux"
                                         "--target=aarch64-linux-gnu"
                                      ;  "--image-type=pine64-raw"
                                        ;"--no-grafts"
                                         )

         ; pinebook pro
         ; https://github.com/Schroedinger50PCT/guix-pinebook-pro/blob/main/pbp.scm

         ; nonfree
         ; https://github.com/aartaka/guix-config/blob/master/nonfree-desktop.scm
         ; https://willschenk.com/articles/2019/installing_guix_on_nuc/


         ; environment (guix/guix "environment")
         environment-openjdk-11 (guix/guix "environment" "--ad-hoc" "openjdk@11")

         ;export 
         export-channels (guix/guix "package" "--export-channels")
         export-manifest (guix/guix "package" "--export-manifest")
         ; show
         show-channels (guix/guix "describe")
         show-channels-root (guix/sudo "describe")
         show-manifest (shell "cat" "/home/florian/.config/guix/current/manifest")
         show-manifest-root (shell "cat" "/home/florian/.config/guix/current/manifest")
         show-image-types (guix/guix "system" "--list-image-types")
        ; size
         size-clojure {:doc "size of clojure"
                       :task (do (println "guix size clojure..")
                                 (guix/guix "size" "clojure"))}
       ; guix size $(guix system build os.scm)
         size-desktop {:doc "size of desktop"
                       :task (do (println "guix size desktop..")
                                 (guix/guix "size" (guix/guix "system" "build" "./machine/nuc.scm")))}

         graph-clojure (guix/graph "clojure") ; this does not work yet.
      

         home-configure (guix/guix "home" "reconfigure" "./home/config.scm")

         syncthing-tunnel {:doc "creates syncthing webadmin tunnel (for nas/syncthing config)"
                           :task (do (println "starting syncthing tunnel..")
                                     (println "syncting local webadmin: localhost:9090")
                                     ;(shell "ssh" "-L" "9090:127.0.0.1:8384" "florian@192.168.1.116")
                                     (shell "ssh" "-N" "-L" "9090:127.0.0.1:8384" "florian@192.168.178.25"))}


         ; ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022 localhost
         ; The -p tells ssh the port you want to connect to. 
         ; -o UserKnownHostsFile=/dev/null prevents ssh from complaining every time you modify your config.scm file and 
         ; -o StrictHostKeyChecking=no prevents you from having to allow a connection to an unknown host every time you connect.
         ssh-vm-local {:doc "ssh into locally running vm"
                       :task (do (println "")
                                 (println "syncting local webadmin: localhost:9090")
                                     ;(shell "ssh" "-L" "9090:127.0.0.1:8384" "florian@192.168.1.116")
                                     (shell "ssh" "-N" "-L" "9090:127.0.0.1:8384" "florian@192.168.178.25"))}


         guile-test (guix/guile "-l" "./modules/awb99/test.scm")
         guix-repl  (guix/guix "repl")
         guix-repl-ocean (guix/guix "repl"
                              "./machine/ocean-image.scm")

        

        ; a 1 
        ; b {:depends [a]    ; bb run --prn b          this tests return values of tasks
        ;    :task (inc a)}
 ;
         }}